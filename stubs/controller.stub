<?php

namespace App\Http\Controllers;

use App\Repositories\{{name}}Repository;
use App\Http\Requests\{{name}}Request;
use Illuminate\Http\Request;

class {{name}}Controller extends Controller
{
    protected $repository;

    public function __construct({{name}}Repository $repository)
    {
        $this->repository = $repository;
    }

    // ✅ Fetch all records
    public function index()
    {
        return response()->json([
            'success' => true,
            'data' => $this->repository->all()
        ]);
    }

    // ✅ Store a new record
    public function store({{name}}Request $request)
    {
        $data = $this->repository->create($request->validated());

        return response()->json([
            'success' => true,
            'message' => '{{name}} created successfully!',
            'data' => $data
        ], 201);
    }

    // ✅ Show a single record
    public function show($id)
    {
        $data = $this->repository->find($id);

        if (!$data) {
            return response()->json(['success' => false, 'message' => 'Record not found'], 404);
        }

        return response()->json(['success' => true, 'data' => $data]);
    }

    // ✅ Update a record
    public function update({{name}}Request $request, $id)
    {
        $updated = $this->repository->update($id, $request->validated());

        if (!$updated) {
            return response()->json(['success' => false, 'message' => 'Update failed'], 400);
        }

        return response()->json([
            'success' => true,
            'message' => '{{name}} updated successfully!'
        ]);
    }

    // ✅ Delete a record
    public function destroy($id)
    {
        $deleted = $this->repository->delete($id);

        if (!$deleted) {
            return response()->json(['success' => false, 'message' => 'Delete failed'], 400);
        }

        return response()->json([
            'success' => true,
            'message' => '{{name}} deleted successfully!'
        ]);
    }
}
